import urllib.parse #It help you break down URL's to edit specific part to look up
import requests #Allows HTTP requets to be made
import webbrowser #Allows automatic opening of default web browser. Used to open Movie Posters
import smtplib #Allows us to send emails. Recommended by ChatGpt
from email.mime.multipart import MIMEMultipart 
#Allows us to send attachments in the email. Used for the link to the posterRecommended by ChatGpt
from email.mime.text import MIMEText #Allow us to create the body of the email.Recommended by ChatGpt
import re  # For email validation. Recommended by ChatGpt.
import random #Allows 'random' decisions tp be made. Used in tier list comment 


# OMDB API Key2
OMDB_API_KEY = "73e1ad7b"  # Replace with your OMDb API key

def send_email(to_email, subject, content):
    """
    Sends an email using the built-in smtplib.
    """
    from_email = "movietestcode@gmail.com"  # Used new email
    from_password = "mdeu rpcm oexq gtsp"  # Replace with a device-specific 2-factor authorization code
    #Used chat gpt to find out why my normal passowrd would not work
    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    # Prepare the email, Info from page you shared in canvas 
    msg = MIMEMultipart()
    msg['From'] = from_email
    msg['To'] = to_email
    msg['Subject'] = subject
    msg.attach(MIMEText(content, 'plain'))
#Used chat gpt to find out that this is what creates the body of the email
# Connect to the SMTP server and send the email
    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls() # Secure the connection
        server.login(from_email, from_password)
        text = msg.as_string()# Converts the message to a string  for sending
        server.sendmail(from_email, to_email, text)  # Send the email from sender to user inputed email
        server.quit()#stops the connection
        print(f"Email successfully sent to {to_email}!")
    except Exception as e:#error exception
        print(f"Failed to send email. Error: {e}")

def is_valid_email(email): #Used ChatGpt to help me make a function that validates the email
    """
    Validates the email format using a simple regex.
    """
    email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    # ^ is for the start of the email
    #The things in the bracket is what can be entered before the @  after the @ and following the .
   
    
    return re.match(email_regex, email) is not None
    # Check if the email matches the pattern
    # re.match() returns a match if the email fits the pattern
    # If the result is NOT None, it means the email is valid, so we return True
    # If the result is None, the email is not valid, so we return False
def Get_Movie_Info(title_or_id):
    """
    Fetches and prints movie information using the OMDb API and prompts the user if they want to email it.
    """
    encoded_title = urllib.parse.quote(title_or_id)
    api_url = f"http://www.omdbapi.com/?t={encoded_title}&apikey={OMDB_API_KEY}"

    try:
        results = requests.get(api_url, timeout=10)
        if results.status_code == 200:
            myJSON = results.json()
            if myJSON.get('Response') == 'True':
                # Filter movie details from the API response
                title = myJSON.get('Title', 'Unknown Title')
                rated = myJSON.get('Rated', 'N/A')
                released = myJSON.get('Released', 'Unknown')
                genre = myJSON.get('Genre', 'N/A')
                director = myJSON.get('Director', 'Unknown')
                actors = myJSON.get('Actors', 'Unknown')
                plot = myJSON.get('Plot', 'N/A')
                imdb_rating = myJSON.get('imdbRating', 'N/A')
                poster = myJSON.get('Poster', 'No poster available')
#Gets info using the api of all the movie info the user inputed 
                movie_info = (
                f"---🎬 𝐌𝐨𝐯𝐢𝐞 𝐈𝐧𝐟𝐨 🎬 ---\n══════════════════════════════\n"
                f"\033[1;34mTitle\033[0m: {title}\n\033[1;34mReleased\033[0m: {released}\n\033[1;34mRated\033[0m: {rated}\n"
                f"\033[1;34mGenre\033[0m: {genre}\n\033[1;34mDirector\033[0m: {director}\n\033[1;34mActors\033[0m: {actors}\n"
                f"\033[1;34mPlot\033[0m: {plot}\n\033[1;34mIMDB Rating\033[0m🎥🍿: {imdb_rating}\n══════════════════════════════\n"
            )

                movie_info_email =(
                f"---🎬 𝐌𝐨𝐯𝐢𝐞 𝐈𝐧𝐟𝐨 🎬 ---\n══════════════════════════════\n"
                f"𝐓𝐢𝐭𝐥𝐞: {title}\n𝐑𝐞𝐥𝐞𝐚𝐬𝐞𝐝: {released}\n𝐑𝐚𝐭𝐞𝐝: {rated}\n"
                f"𝐆𝐞𝐧𝐫𝐞: {genre}\n𝐃𝐢𝐫𝐞𝐜𝐭𝐨𝐫: {director}\n𝐀𝐜𝐭𝐨𝐫𝐬: {actors}\n"
                f"𝐏𝐥𝐨𝐭: {plot}\n𝐈𝐌𝐃𝐁 𝐑𝐚𝐭𝐢𝐧𝐠 🎥🍿: {imdb_rating}\n══════════════════════════════\n"
                f"𝐏𝐨𝐬𝐭𝐞𝐫 𝐋𝐢𝐧𝐤: {poster}"
            )

                # Display movie info to the user
                print(movie_info)
                while True:
                    user_input = input("Would you like to see the movie poster? (yes/no): ").strip().lower()
                    if user_input == "yes":
                        webbrowser.open(poster)  # Open poster in browser
                        break
                    elif user_input == "no":
                        break
                    else:
                        print("Invalid input. Please type 'yes' or 'no'.")

                # Ask if user wants to email the movie details
                while True:
                    send_email_choice = input("Would you like to email this movie info to yourself? (yes/no): ").strip().lower()
                    # Ask the user if they want to email the movie info to themselves
                    if send_email_choice == 'yes':
                        user_email = input("Enter your email address: ").strip()
                        # Ask the user to enter their email address
                        if is_valid_email(user_email):
                            # If the email is valid, send the email with the movie info
                            send_email(user_email, f"Movie Info: {title}", movie_info_email)
                            break
                        else:
                            # If the email format is invalid, notify the user
                            print("Invalid email format. Please enter a valid email address.")
                    elif send_email_choice == 'no':
                        print("Movie info not sent by email.")
                        break
                    else:
                        # If the user's input is not "yes" or "no", ask them to try again
                        print("Invalid input. Please type 'yes' or 'no'.")
            # If the request to the server fails, print an error message with the HTTP status code
            # If the movie wasn't valid or couldn't be found, let the user know
            else:
                print("Sorry, the movie wasn't valid or could not be found.")
        else:
            print(f"Error: Could not fetch data. HTTP Status Code: {results.status_code}")
        # Handle other  request errors like network issues (ChatGpt)
    except requests.exceptions.RequestException as e:
        print(f"Error: An error occurred with the request. Details: {e}")

def Tier_List():
    """
    Allows the user to create a tier list of movies, view it, and optionally email it.
    """
    tier = {rank: [] for rank in ['S', 'A', 'B', 'C', 'D', 'E', 'F']}
    print ("\nA tier list is a visual ranking system that is used to categorize different items,"
    "like movies in this case. At the very top of the list is the S tier, which is the highest"
    "you could rank anything. From there, the tier list descends alphabetically starting with A"
    "and ends with the F tier, which is the lowest you could rank something. This program will"
    "continue to ask you for a movie and its ranking until you input ‘exit’, which will display"
    "your own movie tier list. Choose carefully…")
    while True:
        title = input("\nEnter the title of a movie to rank (or type 'exit' to finish tier list): ").strip()
        if title.lower() == "exit":
            print("\nExiting tier list creation.")
            break
    
        while True:
            user_choice = input(f"Select a ranking for the movie '{title}' (S, A, B, C, D, E, F): ").strip().upper()
            if user_choice in tier:
                tier[user_choice].append(title)
                print(f"Added '{title}' to tier {user_choice}.")
                break
            else:
                print("Invalid ranking. Please choose from S, A, B, C, D, E, F.")
    
    # Display tier list
    print("\n--- Final Tier List ---")
    tier_list_content = ""
    for rank, movies in tier.items():
        tier_list_content += f"{rank} Tier: {', '.join(movies) if movies else 'No movies'}\n"
        print(f"{rank} Tier: {', '.join(movies) if movies else 'No movies'}")

    # Ask user if they want to email the tier list
    send_email_choice = input("\nWould you like to email this tier list to yourself? (yes/no): ").strip().lower()
    if send_email_choice == 'yes':
        user_email = input("Enter your email address: ").strip()
        if is_valid_email(user_email):
            send_email(user_email, "Your Movie Tier List", tier_list_content)
            print("Tier list sent via email.")
        else:
            print("Invalid email format. Tier list not sent.")
    else:
        print("Tier list not sent by email.")

def Random_Ranking():

    
    # Provides a random comment about the overall tier list.
    
    user_choice=input("Do you want feedback on your tier list? (yes/no): ")
    if user_choice=='yes':

        comments = [
            "Wow, this tier list is fantastic! You have great taste.",
            "Yikes, this tier list is trash. Are you okay?",
            "A solid effort, but could use some improvements.",
            "Interesting choices... not sure I agree, but okay.",
            "This tier list is a true masterpiece.",
            "Hmm, someone's playing it safe with these rankings.",
            "Is this a tier list or a cry for help?",
            "Did a cat walk over your keyboard while you made this?",
            "This tier list belongs in a museum. Stunning work.",
            "Well, it's certainly a tier list... I'll give you that."
        ]
        
        # Pick a random comment
        random_comment = random.choice(comments)
        print("\n--- Feedback on Your Tier List ---")
        print(random_comment) 
        print()
    else:
        print("You will not receive tier list feedback.")

# Main Menu Loop
while True:
    try:
        user_choice = float(input(
            "\n--- Welcome to Movie Meter ---\n"
            "You can search for any movie by title. Once you enter a movie, you'll get detailed information, "
   "including the title, release date, genre, director, actors, plot, and IMDb rating. You'll also have "
   "the option to view the movie poster and email the details to yourself. Want to rank your favorite movies? "
   "This feature lets you create a tier list, where you can assign movies to different rankings like S "
   "(top tier) to F (bottom tier). Afterward, you can email the tier list to yourself if you'd like. "
   "If you're done using the program, you can simply quit!"
            
            "\n\n1. Search for a movie\n"
            "2. Create a movie tier list\n"
            "3. Quit\n"
            "\nEnter your choice: "
        ))

        if user_choice == 1:
            movie_title = input("Enter the title of a movie: ").strip()
            Get_Movie_Info(movie_title)
        elif user_choice == 2:
            Tier_List()
            Random_Ranking()
        elif user_choice == 3:
            print("Goodbye!")
            break
        else:
            print("Invalid option. Please select 1, 2, or 3.")
    except ValueError:
        print("Invalid input. Please enter a valid number.")
